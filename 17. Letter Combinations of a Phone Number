Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
---------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if len(digits) == 0 :
            return []
        
        letters = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz",
        }
        combinations = []
        def backtrack(index, path) :
            if len(digits) == len(path) :
                combinations.append("".join(path))
                return
 
            possible_letters = letters[digits[index]]
            for letter in possible_letters:
 
                path.append(letter)
 
                backtrack(index + 1, path)
 
                path.pop()
    
        backtrack(0, [])
        return combinations
        
