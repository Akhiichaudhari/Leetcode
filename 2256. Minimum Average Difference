You are given a 0-indexed integer array nums of length n.

The average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. 
Both averages should be rounded down to the nearest integer.

Return the index with the minimum average difference. If there are multiple such indices, return the smallest one.

Note:

The absolute difference of two numbers is the absolute value of their difference.
The average of n elements is the sum of the n elements divided (integer division) by n.
The average of 0 elements is considered to be 0.

Input: nums = [2,5,3,9,5,3]
Output: 3
--------------------------------------------------------------------------------------------------------------------------------------------

class Solution:
    def minimumAverageDifference(self, nums: List[int]) -> int:
        allSum = 0 
        for num in nums:
            allSum += num
            
        minavg = 5000000
        answer = 0
        summ = 0
        for i,num in enumerate(nums):
            summ += num
            dif1 = int(summ/(i+1)) 
            if i == len(nums)-1:
                dif2=0
            else : dif2 = int((allSum-summ)/(len(nums)-(i+1)))
            if minavg >  abs(dif1 -dif2):
                answer = i
                minavg = min(abs(dif1 -dif2),minavg)
                
        return answer
